# Generated by Django 5.1.3 on 2024-12-01 18:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name of recipe')),
                ('description', models.TextField(verbose_name='Description of recipe')),
                ('prep_time', models.IntegerField(verbose_name='Preparation time')),
                ('total_time', models.IntegerField(verbose_name='Total time')),
                ('servings', models.IntegerField(verbose_name='Servings')),
                ('ingredients', models.TextField(verbose_name='Ingredients')),
                ('tools', models.TextField(verbose_name='Tools needed')),
                ('preparation_steps', models.TextField(verbose_name='Preparation steps')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Updated on')),
                ('type_of_dish', models.CharField(choices=[('APPETIZERS', 'Appetizers'), ('SOUPS', 'Soups'), ('SALADS', 'Salads'), ('MAIN_DISHES', 'Main Dishes'), ('DESSERTS', 'Desserts'), ('SNACKS', 'Snacks'), ('DRINKS', 'Drinks'), ('BREAD', 'Bread')], default='Main Dishes', max_length=100, verbose_name='Type of dish')),
                ('preparation_method', models.CharField(choices=[('FRYING', 'Frying'), ('BOILING', 'Boiling'), ('GRILLING', 'Grilling'), ('BAKING', 'Baking'), ('STEAMING', 'Steaming'), ('SOUS-VIDE', 'Sous-vide'), ('RAW', 'Raw')], default='SOUS-VIDE', max_length=100, verbose_name='Preparation method')),
                ('ingredient_type', models.CharField(choices=[('VEGETABLE_BASED', 'Vegetable-Based'), ('MEAT_BASED', 'Meat-Based'), ('FISH_BASED', 'Fish-Based'), ('FRUIT_BASED', 'Fruit-Based'), ('SEAFOOD', 'Seafood'), ('DAIRY_BASED', 'Dairy-Based'), ('PASTA_RICE_BASED', 'Pasta/Rice-Based')], default='MEAT_BASED', max_length=100, verbose_name='Ingredient Type')),
                ('preparation_time', models.CharField(choices=[('QUICK', 'Quick'), ('MEDIUM', 'Medium'), ('TIME_CONSUMING', 'Time-Consuming')], default='Medium', max_length=100, verbose_name='Preparation time')),
                ('difficulty_level', models.CharField(choices=[('EASY', 'Easy'), ('INTERMEDIATE', 'Intermediate'), ('DIFFICULT', 'Difficult')], default='Easy', max_length=100, verbose_name='Difficulty Level')),
            ],
            options={
                'ordering': ['created_on'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(blank=True, max_length=50, null=True)),
                ('tag_color', models.CharField(default='#000000', max_length=10)),
            ],
            options={
                'ordering': ['tag_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('favorite_recipes', models.ManyToManyField(blank=True, related_name='favorited_by', to='recipes.recipe')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='Comment')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.recipe')),
            ],
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(related_name='recipes', to='recipes.tag'),
        ),
        migrations.CreateModel(
            name='RecipeStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.PositiveIntegerField(default=1, verbose_name='Step number')),
                ('instruction', models.TextField(default='No instruction provided', verbose_name='Instruction')),
                ('temperature', models.IntegerField(blank=True, null=True, verbose_name='Temperature')),
                ('time', models.DurationField(blank=True, null=True, verbose_name='Time')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='recipes.recipe')),
            ],
            options={
                'ordering': ['step_number'],
                'unique_together': {('recipe', 'step_number')},
            },
        ),
    ]
